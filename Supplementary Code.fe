// Surface Evolver code;
// The surface energy of the water meniscus for the 4:1 gripper tip;
// measurement units: MKS;
// Direct questions to bs1805001@sust.edu.cn;
// Publishing 2023.3.13;

keep_originals  //  so numbering in Evolver same as in datafile

// Data
//___________________________________________________________________
// All units SI
// Inner hole size of gripper with aspect ratio of 4:1:  388*98 um;
// Glass fiber size: diameter is 13 um and length is 4 mm;
// Droplet volume: 0.6 umï¼ŒDroplet height: 29 um.

// Fiber size parameters
parameter RCAT = 6.5e-6               //   Radius of fiber;
parameter LCAT = 2000e-6            //   Half length of fiber;

// Fiber position parameters
parameter ZCAT = 35.5e-6              // Fiber axis height;
parameter YCAT = 0.e-6                  // Y bias;
parameter XCAT = 0.e-6                 // The linear bias;

// Gripper parameters
parameter XX   = 49e-6                 //  Half the width of the inner hole of the gripper;
parameter YY   = 194e-6               //  Half the length of the inner hole of the gripper;
parameter AA   = 20e-6                 //  Overall height of gripper;

// Droplet parameters
parameter YY1   = 148e-6            //  Parameter of half of droplet mold length;
parameter HH    = 5.79e-6           //  Parameter of droplet mold height;

parameter TENS = 0.0728             //  surface tension of water, N/m;
parameter Teta   = 62                   //  Contact angle of the gripper;
parameter a3      = 15                   //  Contact angle of the fiber;
parameter Vol  = 0.6e-12             //  droplet volume;   
parameter rot_angle =0                //  The angular bias;

scale_limit 1/TENS                         // approx reciprocal of surface tension;
#define SG  1000                           // water density;
#define GR  -9.8                            // acceleration of gravity;
#define T1 (-TENS*cos(Teta*pi/180))     // virtual tension of facet on catenae;
#define T3   (-TENS*cos(a3*pi/180))      //  virtual tension of facet on catenae.

gravity_constant GR

// Set constraints
//_____________________________________________________________________

constraint 1
formula : (x-XCAT)^2+(z-ZCAT)^2 = RCAT^2

constraint 2  nonnegative                  
formula : (x-XCAT)^2+(z-ZCAT)^2 - RCAT^2

constraint 3 
formula: (x-XCAT)^2+(z-ZCAT)^2 = RCAT^2
energy:  // for contact angle
e1:  -(T3*y*(z-ZCAT))/RCAT
e2:  0
e3:  (T3*y*(x-XCAT))/RCAT 
content:
c1: z*y
c2: 0
c3: 0

constraint 4
formula: (x-XCAT)^2+(z-ZCAT)^2 = RCAT^2
energy:  // for contact angle
e1:  (T3*y*(z-ZCAT))/RCAT
e2:  0
e3:  -(T3*y*(x-XCAT))/RCAT 
content:
c1: z*y
c2: 0
c3: 0

// Guide planes for contact lines around cylinder; planes parallel to cylinder
// For use before neck popping.
define vertex attribute coeff real[2]

constraint 5 
formula: coeff[1]*(x-XCAT) + coeff[2]*(z-ZCAT) = 0

//  Guide planes radial through center of cylinder, for use after neck popping.
constraint 6
formula: coeff[1]*(x-XCAT) + coeff[2]*(y-YCAT) = 0

//  Guide lines radial from bottom point on cylinder (i.e. radial lines on unrolled cylinder).
constraint 7
formula: coeff[1]*(y-YCAT) + coeff[2]*atan2(x-XCAT,-(z-ZCAT)) = 0

boundary 1 parameters 3
x: p1*cos(rot_angle*pi/180) - p2*sin(rot_angle*pi/180)
y: p1*sin(rot_angle*pi/180) + p2*cos(rot_angle*pi/180)
z: p3

// Set vertices
//____________________________________________________________
vertices   

1   (-XX)*cos(rot_angle*pi/180) - (-YY)*sin(rot_angle*pi/180)  (-XX)*sin(rot_angle*pi/180) + (-YY)*cos(rot_angle*pi/180)  0  fixed    
2   XX*cos(rot_angle*pi/180) - (-YY)*sin(rot_angle*pi/180)      XX*sin(rot_angle*pi/180) + (-YY)*cos(rot_angle*pi/180)  0      fixed
3   XX*cos(rot_angle*pi/180) - YY*sin(rot_angle*pi/180)      XX*sin(rot_angle*pi/180) + YY*cos(rot_angle*pi/180)  0              fixed
4   (-XX)*cos(rot_angle*pi/180) - YY*sin(rot_angle*pi/180)  (-XX)*sin(rot_angle*pi/180) + YY*cos(rot_angle*pi/180)  0          fixed

71   -XX  -YY1  HH/2
72    XX  -YY1  HH/2
73    XX  YY1  HH/2
74   -XX  YY1  HH/2

5    -XX  -YY1  HH   
6     XX  -YY1  HH    
7     XX  YY1  HH    
8    -XX  YY1  HH    

// -y contact line
9    RCAT*cos(0*pi/4)+XCAT  -YY1+YCAT  RCAT*sin(0*pi/4)+ZCAT constraints 3
10  RCAT*cos(4*pi/4)+XCAT  -YY1+YCAT  RCAT*sin(4*pi/4)+ZCAT constraints 3
11  RCAT*cos(5*pi/4)+XCAT  -YY1+YCAT  RCAT*sin(5*pi/4)+ZCAT constraints 3
12  RCAT*cos(7*pi/4)+XCAT  -YY1+YCAT  RCAT*sin(7*pi/4)+ZCAT constraints 3

// +y contact line
13  RCAT*cos(0*pi/4)+XCAT   YY1+YCAT  RCAT*sin(0*pi/4)+ZCAT constraints 3  
14  RCAT*cos(4*pi/4)+XCAT   YY1+YCAT  RCAT*sin(4*pi/4)+ZCAT constraints 3  
15  RCAT*cos(5*pi/4)+XCAT   YY1+YCAT  RCAT*sin(5*pi/4)+ZCAT constraints 3  
16  RCAT*cos(7*pi/4)+XCAT   YY1+YCAT  RCAT*sin(7*pi/4)+ZCAT constraints 3  

21  RCAT*cos(  pi/4)+XCAT  -LCAT+YCAT  RCAT*sin(pi/4)+ZCAT      constraint 1 fixed
22  RCAT*cos(3*pi/4)+XCAT  -LCAT+YCAT  RCAT*sin(3*pi/4)+ZCAT constraint 1 fixed
23  RCAT*cos(5*pi/4)+XCAT  -LCAT+YCAT  RCAT*sin(5*pi/4)+ZCAT constraint 1 fixed
24  RCAT*cos(7*pi/4)+XCAT  -LCAT+YCAT  RCAT*sin(7*pi/4)+ZCAT constraint 1 fixed

25  RCAT*cos(  pi/4)+XCAT   LCAT+YCAT  RCAT*sin(pi/4)+ZCAT      constraint 1 fixed
26  RCAT*cos(3*pi/4)+XCAT   LCAT+YCAT  RCAT*sin(3*pi/4)+ZCAT constraint 1 fixed
27  RCAT*cos(5*pi/4)+XCAT   LCAT+YCAT  RCAT*sin(5*pi/4)+ZCAT constraint 1 fixed
28  RCAT*cos(7*pi/4)+XCAT   LCAT+YCAT  RCAT*sin(7*pi/4)+ZCAT constraint 1 fixed

// rails (bottom)
51  -XX -YY  -AA   fixed  boundary 1
52   XX -YY  -AA   fixed  boundary 1
53   XX    YY  -AA   fixed boundary 1
54  -XX    YY  -AA   fixed boundary 1

55  -XX -YY    0   fixed boundary 1
56   XX -YY    0   fixed boundary 1
57   XX    YY    0   fixed boundary 1
58  -XX    YY   0   fixed boundary 1

// Set edges
//_______________________________________
edges

1  1  2      fixed 
2  2  3      fixed 
3  3  4      fixed 
4  4  1      fixed 

71  1  71
72  2  72
73  3  73
74  4  74

75 71 72
76 72 73
77 73 74
78 74 71

//5  5  6   
6  6  7 
//7  7  8   
8  8  5 

9  71  5
10 72  6
11 73  7
12 74  8

13 71  11
14 72  12
15 6   9
16 5  10

17  74  15
18  73  16
19  7  13
20  8  14

// -y contact line
21  9  12 constraints 3 
22 12  11 constraints 3 
23 11  10 constraints 3 
//24 10  9  constraint 3   

// +y contact line
25 16  13 constraints 3 
26 15  16 constraints 3 
27 14  15 constraints  3 
//28 13  14 constraint  3 

29  13  9  constraint 3
30  10 14  constraint 3

// cylinder -y end
33  21  22    constraint 1  fixed
34  22  23   constraint 1 fixed
35  23  24   constraint 1 fixed
36  24  21   constraint 1 fixed

// cylinder +y end
37  25  26   constraint 1 fixed
38  26  27   constraint 1 fixed
39  27  28    constraint 1  fixed
40  28  25   constraint 1 fixed

// cylinder lengthwise
41  21  25  fixed no_refine 
42  22  26  fixed no_refine 
43  23  27  fixed no_refine 
44  24  28  fixed no_refine 

// cylinder diagonal
45  21 26 no_refine constraint 1
46  22 27 no_refine constraint 1
47  23 28 no_refine constraint 1
48  24 25 no_refine constraint 1

// rails (bottom)
51 51 52  fixed no_refine
52 52 53  fixed no_refine
53 53 54  fixed no_refine
54 54 51  fixed no_refine

55 55 56  fixed no_refine
56 56 57  fixed no_refine
57 57 58  fixed no_refine
58 58 55  fixed no_refine

59 51 55  fixed no_refine
60 52 56  fixed no_refine
61 53 57  fixed no_refine
62 54 58  fixed no_refine

// Set facets
//_________________________________________________________________
faces

1    75  14  22 -13    tension TENS color green
2   10  15  21 -14    tension TENS color green
//3   -5  16  24 -15    tension TENS color green
4   -9  13  23 -16    tension TENS color green
6    76  11  -6 -10    tension TENS color green
7    77  17  26 -18    tension TENS color green
8   12  20  27 -17    tension TENS color green
//9   -7  19  28 -20    tension TENS color green
10 -11  18  25 -19    tension TENS color green
//11  -4  -3  -2  -1    tension 0       color green constraint 13
12   78   9  -8 -12    tension TENS color green
13  29 -15 6 19     tension TENS color green
14  8 16 30 -20     tension TENS color green

71 -75 -71 1 72     tension TENS color green
72 -76 -72 2 73      tension TENS color green
73 -77 -73 3 74     tension TENS color green
74 -78 -74 4 71     tension TENS color green

15  33  34  35  36    tension 0    color brown  fixed  no_refine 
16 -40 -39 -38 -37    tension 0    color brown  fixed  no_refine
17  41  37 -45    tension 0    color brown no_refine  constraint 1
18  45 -42 -33    tension 0    color brown no_refine  constraint 1
19  42  38 -46    tension 0    color brown no_refine  constraint 1
20  46 -43 -34    tension 0    color brown no_refine  constraint 1
21  43  39 -47    tension 0    color brown no_refine  constraint 1
22  47 -44 -35    tension 0    color brown no_refine  constraint 1
23  44  40 -48    tension 0    color brown no_refine  constraint 1
24  48 -41 -36    tension 0    color brown no_refine  constraint 1

// rails
50  51   52  53   54            tension 0 color brown fixed no_refine
51  55   56  57   58            tension 0 color brown fixed no_refine
52  52   61 -56  -60            tension 0 color brown fixed no_refine
53  54   59 -58  -62            tension 0 color brown fixed no_refine
54  51   60 -55  -59            tension 0 color brown fixed no_refine
55  53   62 -57  -61            tension 0 color brown fixed no_refine

// Set bodies
//___________________________________________________________________     
bodies

1  1 2  4  6 7 8  10  12 13 14 71 72 73 74   volume Vol  density SG



// macros
//___________________________________________________________________
read

set edge constraint 7 where on_constraint 3;
set vertex constraint 7 where on_constraint 3;

// set coeff values
set_coeff := { 
 foreach vertex vv where on_constraint 6 do
                 { vv.coeff[1] := -(y - YCAT); vv.coeff[2] := (x-XCAT); };
 foreach vertex vv where on_constraint 7 do
                 { vv.coeff[1] := -atan2(x-XCAT,-(z-ZCAT)); vv.coeff[2] := (y-YCAT); }
}

set_coeff;

// make sure everything stays outside of cylinder
foreach facet ff where color==green or color==red do
{ set ff constraint 2;
  set ff.edge constraint 2 where not on_constraint 3 and not on_constraint 4;
  set ff.vertex constraint 2 where not on_constraint 3 and not on_constraint 4;
}

set_coeff;

groom := {
   avglength := avg(edge where valence==2 and not fixed and not no_refine,length);  
   refine edge where length > 2*avglength and not fixed and not no_refine 
     and valence != 1  ;
   set_coeff;
   delete edge where length < 2*avglength/3 and (not no_refine) and valence != 1;
   u; V;
}

groom1 := { 
    minlength := min(edge where not fixed,length);
    refine edge where not no_refine and not fixed and length > 2*minlength and valence==2;
    u; V;
    refine edge where not no_refine and not fixed and length > 2*minlength and valence==2;
    u; V;
}

groom2 := {
   avglength := avg(edge where valence==2 and not fixed and not no_refine,length);
   if avglength > 8e-5 then avglength := 8e-5;  
   refine edge where length > 2*avglength and not fixed and not no_refine 
     and valence != 1  ;
   set_coeff;
   delete edge where length < 2*avglength/3 and (not no_refine) and valence != 1;
   u; V;
}


// set coeff values
foreach vertex vv where on_constraint 6 do
{ vv.coeff[1] := -(y - YCAT); vv.coeff[2] := (x-XCAT); }

// Redefine 'r' to set coeff.   This works since new vertices get
// attribute values 0, which satisfy constraint 5.
r :::= { 'r';
         equiangulate edge where on_constraint 1;
         set_coeff;
}

// Initial evolution
gogo := { 
u;
r;
u;
groom;
r;
u;
g 5;
groom;
g 10;
groom;
g 20;
groom2;
r;
groom2;
g 60;
u;
groom2;
g 20;
g 20;
g 20;
// hessian_seek;

groom2;
g 20;
groom2;
g 60;
groom;
g 40;
convert_to_quantities;
show_all_quantities;
v;
// hessian_seek;

r;
g 300;
}

// Increase volume to find drip point
upper := {
   do {
     body[1].target *= 1.01;
     g 20;
     hessian_seek;
subcommand;
   } while 1;
}

         ps_colorflag on;
         ps_gridflag on;
         ps_labelflag off;

drip := {

         windows_aspect_ratio := 1;
   view_matrix := 
   {{592.808980800493, 0, 0,-0.000413318459746366},
    { 0,592.808980800493, 0, 0},
    { 0, 0,592.808980800493,0.390567321364442},
    { 0, 0, 0, 1}};

   gogo;

   body[1].target := 8e-9;
   g 5;
   groom2; g 5; groom2;
   // save image every time the nadir of the drop goes down by half rod radius
   steps := floor(-2*min(vertex,z)/RCAT);
   first_steps := steps;
   do
   { g 50; groom2; g 10;
     if min(vertex,z) < -steps*RCAT/2 then
         ps_bareedgewidth := 0.001000;
         ps_conedgewidth := 0.001000;
         ps_gridedgewidth := 0.000350;
         ps_conedgewidth := 0.001000;
     { postscript sprintf "frame_%d.eps",steps;
       dump sprintf "frame_%d.dmp",steps;
       steps++;
     };
   } while min(vertex,z) > -0.0029;
   postscript sprintf "frame_%d.eps",steps;
   dump sprintf "frame_%d.dmp",steps;
   last_steps := steps;
}

// Assemble all the dump files into one image.
combine := {
   for ( steps := last_steps ; steps >= first_steps ; steps-- )
   { // take current stuff off constraints so it can be shifted over
     unset vertex constraint 7;
     set vertex y y+2*LCAT;
   };
}